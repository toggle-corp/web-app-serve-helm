# git-cliff ~ configuration file
# https://git-cliff.org/docs/configuration

[remote.github]
owner = "toggle-corp"
repo = "web-app-serve-helm"

[changelog]
# A Tera template to be rendered as the changelog's header.
# See https://keats.github.io/tera/docs/#introduction
header = """
# Changelog\n
"""
# A Tera template to be rendered for each release in the changelog.
# See https://keats.github.io/tera/docs/#introduction
body = """
{%- macro remote_url() -%}
  https://github.com/{{ remote.github.owner }}/{{ remote.github.repo }}
{%- endmacro -%}

{%- macro print_contributor(username) -%}
  [@{{ username }}](https://github.com/{{ username }})
{%- endmacro -%}

{% macro print_commit(commit) -%}
    - {% if commit.scope %}*({{ commit.scope }})* {% endif %}\
        {% if commit.breaking %}[**breaking**] {% endif %}\
        {{ commit.message | upper_first }} - \
        ([{{ commit.id | truncate(length=7, end="") }}]({{ self::remote_url() }}/commit/{{ commit.id }}))\
{% endmacro -%}

{% if version %}\
    {% if previous.version %}\
        ## [{{ version }}]\
          ({{ self::remote_url() }}/compare/{{ previous.version }}..{{ version }}) - {{ timestamp | date(format="%Y-%m-%d") }}
    {% else %}\
        ## [{{ version }}] - {{ timestamp | date(format="%Y-%m-%d") }}
    {% endif %}\
{% else %}\
    ## [unreleased]
{% endif %}\

### Changes:
{% for group, commits in commits | group_by(attribute="group") %}
    #### {{ group | striptags | trim | upper_first }}
    {% for commit in commits
    | filter(attribute="scope")
    | sort(attribute="scope") %}
        {{ self::print_commit(commit=commit) }}
    {%- endfor %}
    {% for commit in commits %}
        {%- if not commit.scope -%}
            {{ self::print_commit(commit=commit) }}
        {% endif -%}
    {% endfor -%}
{% endfor -%}

{%- set pr_commits = commits | filter(attribute="remote.pr_number") | sort(attribute="remote.pr_number") -%}
{% if pr_commits | length > 0 %}
### 🍻 Pull Requests ({{ pr_commits | length }})
{%- for commit in pr_commits %}
- (#{{ commit.remote.pr_number }}) \
    [{{ commit.remote.pr_title | upper_first }}]({{ self::remote_url() }}/pull/{{ commit.remote.pr_number }})
{%- endfor %}
{% endif %}

{%- if github -%}
{%- set new_contributors = github.contributors | filter(attribute="is_first_time", value=true) -%}
{% if new_contributors | length > 0 %}
### :tada: New Contributors ({{ new_contributors | length }})
{% endif %}\
{% for contributor in new_contributors %}
  - {{ self::print_contributor(username=contributor.username) }} made their first contribution
    {%- if contributor.pr_number %} in \
      [#{{ contributor.pr_number }}]({{ self::remote_url() }}/pull/{{ contributor.pr_number }}) \
    {%- endif %}
{%- endfor -%}
{%- endif %}


"""
# A Tera template to be rendered as the changelog's footer.
# See https://keats.github.io/tera/docs/#introduction
footer = """
<!-- generated by git-cliff -->
"""
# Remove leading and trailing whitespaces from the changelog's body.
trim = true
# An array of regex based postprocessors to modify the changelog.
postprocessors = [
  # Replace the placeholder `<REPO>` with a URL.
  { pattern = '<REPO>', replace = "https://github.com/toggle-corp/web-app-serve-helm" }, # replace repository URL
]

[git]
# Parse commits according to the conventional commits specification.
# See https://www.conventionalcommits.org
conventional_commits = true
# Exclude commits that do not match the conventional commits specification.
filter_unconventional = false
# Split commits on newlines, treating each line as an individual commit.
split_commits = false
# An array of regex based parsers to modify commit messages prior to further processing.
commit_preprocessors = [
  # Replace issue numbers with link templates to be updated in `changelog.postprocessors`.
  { pattern = '\((\w+\s)?#([0-9]+)\)', replace = "([#${2}](<REPO>/issues/${2}))" },
  # Check spelling of the commit message using https://github.com/crate-ci/typos.
  # If the spelling is incorrect, it will be fixed automatically.
  { pattern = '.*', replace_command = 'typos --write-changes -' },
]
# An array of regex based parsers for extracting data from the commit message.
# Assigns commits to groups.
# Optionally sets the commit's scope and can decide to exclude commits from further processing.
commit_parsers = [
  { message = "^feat", group = "<!-- 0 -->🚀  Features" },
  { message = "^fix", group = "<!-- 1 -->🐛 Bug Fixes" },
  { message = "^doc", group = "<!-- 3 -->📚 Documentation" },
  { message = "^perf", group = "<!-- 4 -->⚡ Performance" },
  { message = "^refactor\\(clippy\\)", skip = true },
  { message = "^refactor", group = "<!-- 2 -->🚜 Refactor" },
  { message = "^style", group = "<!-- 5 -->🎨 Styling" },
  { message = "^test", group = "<!-- 6 -->🧪 Testing" },
  { message = "^chore\\(release\\): prepare for", skip = true },
  { message = "^chore\\(deps.*\\)", skip = true },
  { message = "^chore\\(pr\\)", skip = true },
  { message = "^chore\\(pull\\)", skip = true },
  { message = "^chore\\(npm\\).*yarn\\.lock", skip = true },
  { message = "^chore|^ci", group = "<!-- 7 -->⚙️ Miscellaneous Tasks" },
  { body = ".*security", group = "<!-- 8 -->🛡️ Security" },
  { message = "^revert", group = "<!-- 9 -->◀️ Revert" },
]
# Prevent commits that are breaking from being excluded by commit parsers.
protect_breaking_commits = false
# Exclude commits that are not matched by any commit parser.
filter_commits = false
# Regex to select git tags that represent releases.
tag_pattern = "[0-9].*"
# Regex to select git tags that do not represent proper releases.
# Takes precedence over `tag_pattern`.
# Changes belonging to these releases will be included in the next release.
skip_tags = "beta|alpha"
# Regex to exclude git tags after applying the tag_pattern.
ignore_tags = "rc|v2.1.0|v2.1.1"
# Order releases topologically instead of chronologically.
topo_order = false
# Order of commits in each group/release within the changelog.
# Allowed values: newest, oldest
sort_commits = "newest"
